#version 450 core

// The number of control points in the output patch
// This shader is executed once per vertex in the output patch
layout(vertices = 3) out;

in vec3 worldPos_tessCont_in[];
in vec2 texCoord_tessCont_in[];
in vec4 texColor_tessCont_in[];
in vec3 worldNormal_tessCont_in[];

out vec3 worldPos_tessEval_in[];
out vec2 texCoord_tessEval_in[];
out vec4 texColor_tessEval_in[];
out vec3 worldNormal_tessEval_in[];

// A basic tesselation control shader which should suffice for initial implementation
// From http://voxels.blogspot.com/2011/09/tesselation-shader-tutorial-with-source.html
//      http://ogldev.atspace.co.uk/www/tutorial30/tutorial30.html
void main(void)
{
  // Passthrough the per-vertex attributes
  worldPos_tessEval_in[gl_InvocationID] = worldPos_tessCont_in[gl_InvocationID];
  texCoord_tessEval_in[gl_InvocationID] = texCoord_tessCont_in[gl_InvocationID];
  texColor_tessEval_in[gl_InvocationID] = texColor_tessCont_in[gl_InvocationID];
  worldNormal_tessEval_in[gl_InvocationID] = worldNormal_tessCont_in[gl_InvocationID];

  // Calculate tesselation levels
  // For a triangle patch only the first 3 outer and first inner are useable
  // For others outer has 4 elements, inner has 2
  // Here we're hardcoding this which isn't great, should determine distance from eye position
  // to work out how detailed the tesselation really needs to be
  gl_TessLevelOuter[0] = 2.0;
  gl_TessLevelOuter[1] = 4.0;
  gl_TessLevelOuter[2] = 6.0;

  gl_TessLevelInner[0] = 8.0;
}
